plugins {
    id 'fabric-loom' version '1.5-SNAPSHOT'
    id 'maven-publish'
}

version = project.mod_version + '+' + project.minecraft_version
group = project.maven_group

repositories {
    maven {
        name = "vram"
        url = "https://maven.vram.io/"
    }
    maven { url = "https://api.modrinth.com/maven" }
    maven { url "https://maven.terraformersmc.com/releases/" }
}

dependencies {
    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    modCompileOnly "maven.modrinth:sodium:mc1.20.1-0.5.8"

    modCompileOnly "io.vram:frex-fabric:20.0.338"
//    modCompileOnly "io.vram:canvas-fabric:20.0.2612"

    implementation(annotationProcessor("io.github.llamalad7:mixinextras-fabric:0.3.1"))
}

sourceSets {
    test {
        compileClasspath += main.compileClasspath
        runtimeClasspath += main.runtimeClasspath
    }
}

loom {
    accessWidenerPath = file("src/main/resources/star.accesswidener")
    runConfigs.forEach {
        it.property("mixin.hotSwap", "true")
    }

    runs {
        testmodClient {
            client()
            vmArg("-Dmixin.debug.export=true")
            ideConfigGenerated project.rootProject == project
            name = "Testmod Client"
            source sourceSets.test
        }
        testmodServer {
            server()
            vmArg("-Dmixin.debug.export=true")
            ideConfigGenerated project.rootProject == project
            name = "Testmod Server"
            source sourceSets.test
        }
    }
}

processResources {
    inputs.property "version", project.version
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

def targetJavaVersion = 17
tasks.withType(JavaCompile).configureEach {
    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    // If Javadoc is generated, this must be specified in that task too.
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release = targetJavaVersion
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    archivesBaseName = project.archives_base_name
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}

def ENV = System.getenv()

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }

    repositories {
        maven {
            url ENV.MAVEN_URL
            credentials {
                username ENV.MAVEN_USER
                password ENV.MAVEN_PASSWORD
            }
        }
    }
}
